{
	// Place your snippets for cpp here. Each snippet is defined under a snippet name and has a prefix, body and 
	// description. The prefix is what is used to trigger the snippet and the body will be expanded and inserted. Possible variables are:
	// $1, $2 for tab stops, $0 for the final cursor position, and ${1:label}, ${2:another} for placeholders. Placeholders with the 
	// same ids are connected.
	// Example:
	// "Print to console": {
	// 	"prefix": "log",
	// 	"body": [
	// 		"console.log('$1');",
	// 		"$2"
	// 	],
	// 	"description": "Log output to console"
	// }
	"mt19937": {
		"prefix": "rnd",
		"body": [
			"std::mt19937",
			"    generator(std::chrono::high_resolution_clock::now().time_since_epoch().count());",
			"",
			"inline int getrand(int l, int r) {",
			"    return std::uniform_int_distribution<int>(l, r)(generator);",
			"}"
		],
		"description": "mt19937 template"
	},
	"forceinline": {
		"prefix": "forceinline",
		"body": [
			"#define inline inline __attribute__((always_inline))"
		]
    },
	"vectorcin": {
		"prefix": "vectorcin",
		"body": [
			"template <typename T> istream &operator>>(istream &is, vector<T> &a_input) {",
			"    for (int i = 0; i < a_input.size(); ++i)",
			"        is >> a_input[i];",
			"    return is;",
			"}"
		]
	},
	"fastio": {
		"prefix": "fastio",
		"body": [
			"ios_base::sync_with_stdio(0);",
			"cin.tie(0);",
			"cout.tie(0);"
		]
	},
	"pragmas": {
		"prefix": "pragmas",
		"body": [
			"#pragma GCC target(\"sse,sse2,sse3,ssse3,sse4,popcnt,abm,mmx,avx,tune=native\")",
			"#pragma GCC optimize(\"Ofast\")",
			"#pragma GCC optimize(\"inline\")",
			"#pragma GCC optimize(\"unroll-loops\")"
		]
	},
	"File I/O": {
		"prefix": "fileio",
		"body": [
			"freopen(\"$1.txt\", \"r\", stdin);",
			"freopen(\"$2.txt\", \"w\", stdout);"
		]
	},
	"debug": {
		"prefix": "debug",
		"body": [
			"#ifdef LOCAL",
			"cerr << \"\\e[91m\";",
			"$1",
			"cerr << \"\\e[39m\\n\";",
			"#endif"
		]
	}
}
