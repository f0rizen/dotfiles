{
	// Place your snippets for cpp here. Each snippet is defined under a snippet name and has a prefix, body and 
	// description. The prefix is what is used to trigger the snippet and the body will be expanded and inserted. Possible variables are:
	// $1, $2 for tab stops, $0 for the final cursor position, and ${1:label}, ${2:another} for placeholders. Placeholders with the 
	// same ids are connected.
	// Example:
	// "Print to console": {
	// 	"prefix": "log",
	// 	"body": [
	// 		"console.log('$1');",
	// 		"$2"
	// 	],
	// 	"description": "Log output to console"
	// }
	"mt19937": {
		"prefix": "rnd",
		"body": [
			"std::mt19937",
			"    generator(std::chrono::steady_clock::now().time_since_epoch().count());",
			"",
			"inline int getrand(int l, int r) {",
			"    return std::uniform_int_distribution<int>(l, r)(generator);",
			"}"
		],
		"description": "mt19937 template"
	},
	"forceinline": {
		"prefix": "forceinline",
		"body": [
			"#define inline inline __attribute__((always_inline))"
		],
	},
	"vectorcin": {
		"prefix": "vectorcin",
		"body": [
			"template <typename T> istream &operator>>(istream &is, vector<T> &a_input) {",
			"    for (int i = 0; i < a_input.size(); ++i)",
			"        is >> a_input[i];",
			"    return is;",
			"}"
		]
	},
	"fastio": {
		"prefix": "fastio",
		"body": [
			"ios_base::sync_with_stdio(0);",
			"cin.tie(0);",
			"cout.tie(0);"
		]
	},
	"pragmas": {
		"prefix": "pragmas",
		"body": [
			"#pragma GCC optimize(\"unroll-loops\")",
			"#pragma GCC target(\"sse,sse2,sse3,ssse3,sse4,popcnt,abm,mmx,avx,tune=native\")",
			"#pragma GCC optimize(\"Ofast\")",
			"#pragma GCC optimize(\"inline\")",
			"#pragma GCC optimize(\"-fgcse\")",
			"#pragma GCC optimize(\"-fgcse-lm\")",
			"#pragma GCC optimize(\"-fipa-sra\")",
			"#pragma GCC optimize(\"-ftree-pre\")",
			"#pragma GCC optimize(\"-ftree-vrp\")",
			"#pragma GCC optimize(\"-fpeephole2\")",
			"#pragma GCC optimize(\"-ffast-math\")",
			"#pragma GCC optimize(\"-fsched-spec\")",
			"#pragma GCC optimize(\"unroll-loops\")",
			"#pragma GCC optimize(\"-falign-jumps\")",
			"#pragma GCC optimize(\"-falign-loops\")",
			"#pragma GCC optimize(\"-falign-labels\")",
			"#pragma GCC optimize(\"-fdevirtualize\")",
			"#pragma GCC optimize(\"-fcaller-saves\")",
			"#pragma GCC optimize(\"-fcrossjumping\")",
			"#pragma GCC optimize(\"-fthread-jumps\")",
			"#pragma GCC optimize(\"-funroll-loops\")",
			"#pragma GCC optimize(\"-fwhole-program\")",
			"#pragma GCC optimize(\"-freorder-blocks\")",
			"#pragma GCC optimize(\"-fschedule-insns\")",
			"#pragma GCC optimize(\"inline-functions\")",
			"#pragma GCC optimize(\"-ftree-tail-merge\")",
			"#pragma GCC optimize(\"-fschedule-insns2\")",
			"#pragma GCC optimize(\"-fstrict-aliasing\")",
			"#pragma GCC optimize(\"-fstrict-overflow\")",
			"#pragma GCC optimize(\"-falign-functions\")",
			"#pragma GCC optimize(\"-fcse-skip-blocks\")",
			"#pragma GCC optimize(\"-fcse-follow-jumps\")",
			"#pragma GCC optimize(\"-fsched-interblock\")",
			"#pragma GCC optimize(\"-fpartial-inlining\")",
			"#pragma GCC optimize(\"no-stack-protector\")",
			"#pragma GCC optimize(\"-freorder-functions\")",
			"#pragma GCC optimize(\"-findirect-inlining\")",
			"#pragma GCC optimize(\"-fhoist-adjacent-loads\")",
			"#pragma GCC optimize(\"-frerun-cse-after-loop\")",
			"#pragma GCC optimize(\"inline-small-functions\")",
			"#pragma GCC optimize(\"-finline-small-functions\")",
			"#pragma GCC optimize(\"-ftree-switch-conversion\")",
			"#pragma GCC optimize(\"-foptimize-sibling-calls\")",
			"#pragma GCC optimize(\"-fexpensive-optimizations\")",
			"#pragma GCC optimize(\"-funsafe-loop-optimizations\")",
			"#pragma GCC optimize(\"inline-functions-called-once\")",
			"#pragma GCC optimize(\"-fdelete-null-pointer-checks\")"
		]
	},
	"File I/O": {
		"prefix": "fileio",
		"body": [
			"freopen(\"$1.txt\", \"w\", stdout);",
			"freopen(\"$2.txt\", \"r\", stdin);"
		]
	},
	"local": {
		"prefix": "local",
		"body": [
			"#ifdef LOCAL",
			"cout << \"-----------------------------\n\";",
			"cout << \"\n-----------------------------\n\";",
			"#endif"
		]
	}
}